/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package salonsystem;

import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.time.format.DateTimeFormatter;
import java.time.LocalDate;
import java.time.LocalTime;

public class adminPanel extends javax.swing.JFrame {
    
    SQLConnector dbConn = new SQLConnector();   
    DefaultTableModel model = new DefaultTableModel();
    DefaultTableModel model2 = new DefaultTableModel();
    
    public adminPanel() {
        initComponents();
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    Connection conn = dbConn.dbConn();
    PreparedStatement pst = null;
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupGenderSide = new javax.swing.ButtonGroup();
        btnGroupBeautTier = new javax.swing.ButtonGroup();
        tabMain = new javax.swing.JTabbedPane();
        pnlMembers = new javax.swing.JPanel();
        btnRemove = new javax.swing.JButton();
        btnModify = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCustInfo = new javax.swing.JTable();
        btnRefreshCust = new javax.swing.JButton();
        lblCustNameSide = new javax.swing.JLabel();
        txtCustNameSide = new javax.swing.JTextField();
        btnGenderMaleSide = new javax.swing.JRadioButton();
        btnGenderFemaleSide = new javax.swing.JRadioButton();
        btnGenderOthersSide = new javax.swing.JRadioButton();
        lblGenderSide = new javax.swing.JLabel();
        lblAddressSide = new javax.swing.JLabel();
        txtAddressSide = new javax.swing.JTextField();
        btnAddSide = new javax.swing.JButton();
        pnlTransactions = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSubInfo = new javax.swing.JTable();
        txtInvoiceTrans = new javax.swing.JTextField();
        lblCustNameSide1 = new javax.swing.JLabel();
        lblCustNameSide2 = new javax.swing.JLabel();
        txtCustTrans = new javax.swing.JTextField();
        lblCustNameSide3 = new javax.swing.JLabel();
        lblCustNameSide4 = new javax.swing.JLabel();
        txtDateTrans = new javax.swing.JTextField();
        txtTimeTrans = new javax.swing.JTextField();
        lblCustNameSide5 = new javax.swing.JLabel();
        txtBranchTrans = new javax.swing.JTextField();
        txtPayTrans = new javax.swing.JTextField();
        lblCustNameSide6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblTransInfo = new javax.swing.JTable();
        lblCustNameSide8 = new javax.swing.JLabel();
        lblCustNameSide9 = new javax.swing.JLabel();
        txtBeautIdSub = new javax.swing.JTextField();
        txtServCodeSub = new javax.swing.JTextField();
        btnAddSub = new javax.swing.JButton();
        btnUpdateSub = new javax.swing.JButton();
        btnRemoveSubtotal = new javax.swing.JButton();
        btnRefreshSubtotal = new javax.swing.JButton();
        btnRemoveTrans = new javax.swing.JButton();
        btnRefreshTransactions = new javax.swing.JButton();
        btnAddTrans = new javax.swing.JButton();
        btnUpdateTrans = new javax.swing.JButton();
        lblCustNameSide10 = new javax.swing.JLabel();
        txtSatisSub = new javax.swing.JTextField();
        pnlBeautInfo = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblBeautInfo = new javax.swing.JTable();
        btnBeautAdd = new javax.swing.JButton();
        btnBeautModify = new javax.swing.JButton();
        btnBeautRemove = new javax.swing.JButton();
        lblBeautName = new javax.swing.JLabel();
        lblBeautTier = new javax.swing.JLabel();
        txtBeautName = new javax.swing.JTextField();
        btnTierBeginner = new javax.swing.JRadioButton();
        btnTierNovice = new javax.swing.JRadioButton();
        btnTierExpert = new javax.swing.JRadioButton();
        btnBeautRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admin");

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnModify.setText("Modify");
        btnModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyActionPerformed(evt);
            }
        });

        tblCustInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Address", "Gender", "Membership ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        String ID="";
        String Name="";
        String Address="";
        String MemID="";
        String Gender="";
        model = (DefaultTableModel) tblCustInfo.getModel();
        try{
            pst = conn.prepareStatement("SELECT * FROM customerinfo");
            ResultSet rs = pst.executeQuery();

            while(rs.next()){
                ID = rs.getString("custid");
                Name = rs.getString("custname");
                Address = rs.getString("custaddress");
                Gender = rs.getString("custgender");
                MemID = rs.getString("memid");
                model.addRow(new Object[]{ID,Name,Address,Gender,MemID});
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        tblCustInfo.getTableHeader().setReorderingAllowed(false);
        tblCustInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCustInfoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCustInfo);
        if (tblCustInfo.getColumnModel().getColumnCount() > 0) {
            tblCustInfo.getColumnModel().getColumn(0).setMinWidth(55);
            tblCustInfo.getColumnModel().getColumn(0).setMaxWidth(55);
            tblCustInfo.getColumnModel().getColumn(3).setMinWidth(65);
            tblCustInfo.getColumnModel().getColumn(3).setMaxWidth(65);
        }

        btnRefreshCust.setText("Refresh");
        btnRefreshCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshCustActionPerformed(evt);
            }
        });

        lblCustNameSide.setText("Name");

        btnGroupGenderSide.add(btnGenderMaleSide);
        btnGenderMaleSide.setText("Male");
        btnGenderMaleSide.setActionCommand("Male");

        btnGroupGenderSide.add(btnGenderFemaleSide);
        btnGenderFemaleSide.setText("Female");
        btnGenderFemaleSide.setActionCommand("Female");

        btnGroupGenderSide.add(btnGenderOthersSide);
        btnGenderOthersSide.setText("Others");
        btnGenderOthersSide.setActionCommand("Others");

        lblGenderSide.setText("Gender");

        lblAddressSide.setText("Address");

        btnAddSide.setText("Add");
        btnAddSide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSideActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMembersLayout = new javax.swing.GroupLayout(pnlMembers);
        pnlMembers.setLayout(pnlMembersLayout);
        pnlMembersLayout.setHorizontalGroup(
            pnlMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMembersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRemove)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRefreshCust)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlMembersLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMembersLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(pnlMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCustNameSide)
                            .addComponent(lblGenderSide))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCustNameSide, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlMembersLayout.createSequentialGroup()
                                .addComponent(btnGenderMaleSide)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnGenderFemaleSide)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnGenderOthersSide))))
                    .addGroup(pnlMembersLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblAddressSide)
                            .addComponent(btnModify, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMembersLayout.createSequentialGroup()
                                .addComponent(btnAddSide, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtAddressSide))))
                .addGap(0, 76, Short.MAX_VALUE))
        );
        pnlMembersLayout.setVerticalGroup(
            pnlMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMembersLayout.createSequentialGroup()
                .addGroup(pnlMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemove)
                    .addComponent(btnRefreshCust))
                .addGap(6, 6, 6)
                .addGroup(pnlMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMembersLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(pnlMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCustNameSide)
                            .addComponent(txtCustNameSide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGenderMaleSide)
                            .addComponent(btnGenderFemaleSide)
                            .addComponent(btnGenderOthersSide)
                            .addComponent(lblGenderSide))
                        .addGap(18, 18, 18)
                        .addGroup(pnlMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAddressSide)
                            .addComponent(txtAddressSide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddSide)
                            .addComponent(btnModify))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMembersLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        tabMain.addTab("Members", pnlMembers);

        tblSubInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Beautician", "Beautician Fee", "Service", "Service Fee", "Membership ID", "Subtotal", "Satisfaction"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblSubInfo);

        txtInvoiceTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInvoiceTransActionPerformed(evt);
            }
        });

        lblCustNameSide1.setText("Invoice Number:");

        lblCustNameSide2.setText("Customer ID:");

        txtCustTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustTransActionPerformed(evt);
            }
        });

        lblCustNameSide3.setText("Time");

        lblCustNameSide4.setText("Date");

        txtDateTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateTransActionPerformed(evt);
            }
        });

        txtTimeTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimeTransActionPerformed(evt);
            }
        });

        lblCustNameSide5.setText("Branch:");

        txtBranchTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBranchTransActionPerformed(evt);
            }
        });

        txtPayTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPayTransActionPerformed(evt);
            }
        });

        lblCustNameSide6.setText("Payment Method");

        tblTransInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Invoice", "Customer ID", "Date", "Time", "Branch", "Payment Mode", "Member ID", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblTransInfo);

        lblCustNameSide8.setText("Beautician ID");

        lblCustNameSide9.setText("Service Code");

        txtBeautIdSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBeautIdSubActionPerformed(evt);
            }
        });

        txtServCodeSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtServCodeSubActionPerformed(evt);
            }
        });

        btnAddSub.setText("Add");
        btnAddSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSubActionPerformed(evt);
            }
        });

        btnUpdateSub.setText("Update");
        btnUpdateSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateSubActionPerformed(evt);
            }
        });

        btnRemoveSubtotal.setText("Remove");
        btnRemoveSubtotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveSubtotalActionPerformed(evt);
            }
        });

        btnRefreshSubtotal.setText("Refresh");
        btnRefreshSubtotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshSubtotalActionPerformed(evt);
            }
        });

        btnRemoveTrans.setText("Remove");
        btnRemoveTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveTransActionPerformed(evt);
            }
        });

        btnRefreshTransactions.setText("Refresh");
        btnRefreshTransactions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshTransactionsActionPerformed(evt);
            }
        });

        btnAddTrans.setText("Add");
        btnAddTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTransActionPerformed(evt);
            }
        });

        btnUpdateTrans.setText("Update");
        btnUpdateTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateTransActionPerformed(evt);
            }
        });

        lblCustNameSide10.setText("Satisfaction");

        txtSatisSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSatisSubActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTransactionsLayout = new javax.swing.GroupLayout(pnlTransactions);
        pnlTransactions.setLayout(pnlTransactionsLayout);
        pnlTransactionsLayout.setHorizontalGroup(
            pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTransactionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTransactionsLayout.createSequentialGroup()
                        .addComponent(btnRemoveSubtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRefreshSubtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlTransactionsLayout.createSequentialGroup()
                        .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                                .addComponent(jScrollPane2))
                            .addGroup(pnlTransactionsLayout.createSequentialGroup()
                                .addComponent(btnRemoveTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnRefreshTransactions, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlTransactionsLayout.createSequentialGroup()
                                .addGap(128, 128, 128)
                                .addComponent(txtSatisSub, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlTransactionsLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(pnlTransactionsLayout.createSequentialGroup()
                                                .addComponent(lblCustNameSide1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtInvoiceTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(pnlTransactionsLayout.createSequentialGroup()
                                                .addComponent(lblCustNameSide2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtCustTrans))
                                            .addGroup(pnlTransactionsLayout.createSequentialGroup()
                                                .addComponent(lblCustNameSide3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtTimeTrans))
                                            .addGroup(pnlTransactionsLayout.createSequentialGroup()
                                                .addComponent(lblCustNameSide4, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtDateTrans))
                                            .addGroup(pnlTransactionsLayout.createSequentialGroup()
                                                .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblCustNameSide5, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblCustNameSide6, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtBranchTrans)
                                                    .addComponent(txtPayTrans))))
                                        .addGroup(pnlTransactionsLayout.createSequentialGroup()
                                            .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblCustNameSide8, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(lblCustNameSide9, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(lblCustNameSide10, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtBeautIdSub, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtServCodeSub, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(pnlTransactionsLayout.createSequentialGroup()
                                        .addComponent(btnUpdateSub, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnAddSub, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlTransactionsLayout.createSequentialGroup()
                                        .addComponent(btnUpdateTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnAddTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        pnlTransactionsLayout.setVerticalGroup(
            pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTransactionsLayout.createSequentialGroup()
                .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTransactionsLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtInvoiceTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCustNameSide1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCustTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCustNameSide2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCustNameSide4)
                            .addComponent(txtDateTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCustNameSide3)
                            .addComponent(txtTimeTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCustNameSide5)
                            .addComponent(txtBranchTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCustNameSide6)
                            .addComponent(txtPayTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddTrans)
                            .addComponent(btnUpdateTrans)))
                    .addGroup(pnlTransactionsLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRemoveTrans)
                            .addComponent(btnRefreshTransactions))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTransactionsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBeautIdSub, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCustNameSide8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCustNameSide9)
                            .addComponent(txtServCodeSub, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSatisSub, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCustNameSide10))
                        .addGap(10, 10, 10)
                        .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddSub)
                            .addComponent(btnUpdateSub))
                        .addGap(146, 146, 146))
                    .addGroup(pnlTransactionsLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRemoveSubtotal)
                            .addComponent(btnRefreshSubtotal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        tabMain.addTab("Transactions", pnlTransactions);

        tblBeautInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Tier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        String BeautID="";
        String BeautName="";
        String BeautTier="";
        model = (DefaultTableModel) tblBeautInfo.getModel();
        try{
            pst = conn.prepareStatement("SELECT * FROM beauticianinfo");
            ResultSet rs = pst.executeQuery();

            while(rs.next()){
                BeautID = rs.getString("beautid");
                BeautName = rs.getString("beautname");
                BeautTier = rs.getString("beauttier");
                model.addRow(new Object[]{BeautID,BeautName,BeautTier});
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        tblBeautInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBeautInfoMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblBeautInfo);
        if (tblBeautInfo.getColumnModel().getColumnCount() > 0) {
            tblBeautInfo.getColumnModel().getColumn(0).setMinWidth(65);
            tblBeautInfo.getColumnModel().getColumn(0).setMaxWidth(65);
        }

        btnBeautAdd.setText("Add");
        btnBeautAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBeautAddActionPerformed(evt);
            }
        });

        btnBeautModify.setText("Modify");
        btnBeautModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBeautModifyActionPerformed(evt);
            }
        });

        btnBeautRemove.setText("Remove");
        btnBeautRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBeautRemoveActionPerformed(evt);
            }
        });

        lblBeautName.setText("Name");

        lblBeautTier.setText("Tier");

        btnGroupBeautTier.add(btnTierBeginner);
        btnTierBeginner.setText("Beginner (1)");
        btnTierBeginner.setActionCommand("1");

        btnGroupBeautTier.add(btnTierNovice);
        btnTierNovice.setText("Novice (2)");
        btnTierNovice.setActionCommand("2");

        btnGroupBeautTier.add(btnTierExpert);
        btnTierExpert.setText("Expert (3)");
        btnTierExpert.setActionCommand("3");

        btnBeautRefresh.setText("Refresh");
        btnBeautRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBeautRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBeautInfoLayout = new javax.swing.GroupLayout(pnlBeautInfo);
        pnlBeautInfo.setLayout(pnlBeautInfoLayout);
        pnlBeautInfoLayout.setHorizontalGroup(
            pnlBeautInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBeautInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBeautRemove)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBeautRefresh)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlBeautInfoLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 29, Short.MAX_VALUE)
                .addGroup(pnlBeautInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnlBeautInfoLayout.createSequentialGroup()
                        .addComponent(lblBeautName)
                        .addGap(18, 18, 18)
                        .addComponent(txtBeautName, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55))
                    .addGroup(pnlBeautInfoLayout.createSequentialGroup()
                        .addComponent(lblBeautTier)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlBeautInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBeautInfoLayout.createSequentialGroup()
                                .addComponent(btnTierBeginner)
                                .addGap(12, 12, 12)
                                .addComponent(btnTierNovice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnTierExpert))
                            .addGroup(pnlBeautInfoLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(btnBeautAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(btnBeautModify, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(31, 31, 31))
        );
        pnlBeautInfoLayout.setVerticalGroup(
            pnlBeautInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBeautInfoLayout.createSequentialGroup()
                .addGroup(pnlBeautInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBeautRemove)
                    .addComponent(btnBeautRefresh))
                .addGroup(pnlBeautInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBeautInfoLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlBeautInfoLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(pnlBeautInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBeautName)
                            .addComponent(txtBeautName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlBeautInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBeautTier)
                            .addComponent(btnTierBeginner)
                            .addComponent(btnTierNovice)
                            .addComponent(btnTierExpert))
                        .addGap(18, 18, 18)
                        .addGroup(pnlBeautInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBeautAdd)
                            .addComponent(btnBeautModify))))
                .addContainerGap())
        );

        tabMain.addTab("Beautician", pnlBeautInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabMain, javax.swing.GroupLayout.PREFERRED_SIZE, 997, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabMain)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    String addName, addGender, addAddress;
    
    private void btnBeautAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBeautAddActionPerformed
         try{            
            String ins = "INSERT INTO beauticianinfo (beautid, beautname, beauttier) VALUES(null,?,?)";
            pst = conn.prepareStatement(ins);
            pst.setString(1, txtBeautName.getText());
            pst.setInt(2, Integer.parseInt(btnGroupBeautTier.getSelection().getActionCommand()));
            
            pst.executeUpdate();
            System.out.println("Inserted successfully");
        }catch(SQLException ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnBeautAddActionPerformed

    //refresh table
    private void btnRefreshCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshCustActionPerformed
        String ID="";
        String Name="";
        String Address="";
        String MemID="";
        String Gender="";
        model = (DefaultTableModel) tblCustInfo.getModel();
        model.setRowCount(0);
        try{
            pst = conn.prepareStatement("SELECT * FROM customerinfo");
            ResultSet rs = pst.executeQuery();

            while(rs.next()){
                ID = rs.getString("custid");
                Name = rs.getString("custname");
                Address = rs.getString("custaddress");
                MemID = rs.getString("memid");
                Gender = rs.getString("custgender");
                model.addRow(new Object[]{ID,Name,Address,Gender,MemID});
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnRefreshCustActionPerformed
    
    //delete a row
    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        if(tblCustInfo.getSelectedRow()!=-1){
            model = (DefaultTableModel) tblCustInfo.getModel();
            int row = tblCustInfo.getSelectedRow();
            Object id = model.getValueAt(row, 0);
            
            String delRow = "DELETE FROM customerinfo WHERE custid="+id;
            try{
                pst = conn.prepareStatement(delRow);
                pst.execute();
                model.removeRow(tblCustInfo.getSelectedRow());
                System.out.println("Row deleted successfully");
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyActionPerformed
        if(tblCustInfo.getSelectedRow()!=-1){
            model = (DefaultTableModel) tblCustInfo.getModel();
            int row = tblCustInfo.getSelectedRow();
            Object id = model.getValueAt(row, 0);
            String modifyQuery="update customerinfo set custname=?, custgender=?, custaddress=? where custid="+id;
            try{
                pst = conn.prepareStatement(modifyQuery);
                pst.setString(1, txtCustNameSide.getText());
                pst.setString(2, btnGroupGenderSide.getSelection().getActionCommand());
                pst.setString(3, txtAddressSide.getText());
                
                pst.executeUpdate();
                System.out.println("Modified successfully");
        }catch(Exception e){
            e.printStackTrace();
        }
        }
    }//GEN-LAST:event_btnModifyActionPerformed

    private void btnAddSideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSideActionPerformed
        try{            
            String ins = "INSERT INTO customerinfo (custid, custname, custgender, custaddress, memid) VALUES(null,?,?,?,null)";
            pst = conn.prepareStatement(ins);
            pst.setString(1, txtCustNameSide.getText());
            pst.setString(2, btnGroupGenderSide.getSelection().getActionCommand());
            pst.setString(3, txtAddressSide.getText());
            
            pst.executeUpdate();
            System.out.println("Inserted successfully");
        }catch(SQLException ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnAddSideActionPerformed

    private void tblCustInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCustInfoMouseClicked
        
    }//GEN-LAST:event_tblCustInfoMouseClicked

    private void btnBeautRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBeautRefreshActionPerformed
        String ID="";
        String Name="";
        String Tier="";
        model = (DefaultTableModel) tblBeautInfo.getModel();
        model.setRowCount(0);
        try{
            pst = conn.prepareStatement("SELECT * FROM beauticianinfo");
            ResultSet rs = pst.executeQuery();

            while(rs.next()){
                ID = rs.getString("beautid");
                Name = rs.getString("beautname");
                Tier = rs.getString("beauttier");
                model.addRow(new Object[]{ID,Name,Tier});
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnBeautRefreshActionPerformed

    private void btnBeautRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBeautRemoveActionPerformed
        if(tblBeautInfo.getSelectedRow()!=-1){
            model = (DefaultTableModel) tblBeautInfo.getModel();
            int row = tblBeautInfo.getSelectedRow();
            Object id = model.getValueAt(row, 0);
            
            String delRow = "DELETE FROM beauticianinfo WHERE beautid="+id;
            try{
                pst = conn.prepareStatement(delRow);
                pst.execute();
                model.removeRow(tblBeautInfo.getSelectedRow());
                System.out.println("Row deleted successfully");
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnBeautRemoveActionPerformed

    private void tblBeautInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBeautInfoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblBeautInfoMouseClicked

    private void btnBeautModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBeautModifyActionPerformed
        if(tblBeautInfo.getSelectedRow()!=-1){
            model = (DefaultTableModel) tblBeautInfo.getModel();
            int row = tblBeautInfo.getSelectedRow();
            Object id = model.getValueAt(row, 0);
            String modifyQuery="update beauticianinfo set beautname=?, beauttier=? where beautid="+id;
            try{
                pst = conn.prepareStatement(modifyQuery);
                pst.setString(1, txtBeautName.getText());
                pst.setInt(2, Integer.parseInt(btnGroupBeautTier.getSelection().getActionCommand()));
                
                pst.executeUpdate();
                System.out.println("Modified successfully");
        }catch(Exception e){
            e.printStackTrace();
        }
        }
    }//GEN-LAST:event_btnBeautModifyActionPerformed

    private void txtInvoiceTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInvoiceTransActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInvoiceTransActionPerformed

    private void txtCustTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustTransActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCustTransActionPerformed

    private void txtDateTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateTransActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateTransActionPerformed

    private void txtTimeTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimeTransActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimeTransActionPerformed

    private void txtBranchTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBranchTransActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBranchTransActionPerformed

    private void txtPayTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPayTransActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPayTransActionPerformed

    private void txtBeautIdSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBeautIdSubActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBeautIdSubActionPerformed

    private void txtServCodeSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtServCodeSubActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtServCodeSubActionPerformed

    private void btnAddSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSubActionPerformed
        try{            
            model = (DefaultTableModel) tblTransInfo.getModel();
            int row = tblTransInfo.getSelectedRow();
            Object id = model.getValueAt(row, 0);
            Object cust_id = model.getValueAt(row, 1);
            String ins = "INSERT INTO transactioninfo " +
                         "InvoiceNum, BeautID, SerCode, MemID, BeautTF, SerBFee, " +
                         "VALUES(" +
                         "(SELECT InvoiceNum FROM transactioninfo WHERE InvoiceNum="+ id +"), " +
                         "(SELECT BeautID FROM beauticianinfo WHERE BeautID=?), " +
                         "(SELECT SerCode FROM serviceinfo WHERE SerCode=?), " +
                         "(SELECT MemID FROM customerinfo as custid=" + cust_id +
                         " (SELECT BeautTF FROM beauticianinfo AS bi, tierfee AS tf WHERE bi.BeautID=?))," +
                         "(SELECT SerBFee FROM serviceinfo WHERE SerCode=?) " +
                         ");" +
                         "INSERT INTO satisfaction " +
                         "InvoiceNuM, SerCode, Satisfaction" +
                         "VALUES( " +
                         "(SELECT InvoiceNum FROM transactioninfo WHERE InvoiceNum="+ id +"), " +
                         "(SELECT BeautID FROM beauticianinfo WHERE BeautID=?), " +
                         "?";
            pst = conn.prepareStatement(ins);
            pst.setString(1, txtBeautIdSub.getText());
            pst.setString(2, txtServCodeSub.getText());
            pst.setString(3, txtBeautIdSub.getText());
            pst.setString(4, txtServCodeSub.getText());
            pst.setString(5, txtBeautIdSub.getText());
            pst.setString(6, txtSatisSub.getText());
            
            pst.executeUpdate();
            System.out.println("Inserted Transaction successfully");
        } catch(SQLException ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnAddSubActionPerformed

    private void btnUpdateSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateSubActionPerformed
        if(tblTransInfo.getSelectedRow()!=-1){  
            model = (DefaultTableModel) tblSubInfo.getModel();
            int row = tblSubInfo.getSelectedRow();
            Object idServ = model.getValueAt(row, 2);
            model2 = (DefaultTableModel) tblTransInfo.getModel();
            int rowTrans = tblTransInfo.getSelectedRow();
            Object idTrans = model2.getValueAt(rowTrans, 2);
            
            if (txtSatisSub.getText() == "") {
            String modifyQuery= "UPDATE subtotalcomputation " +
                                "SET BeautID=?, SerCode=? " +
                                "WHERE InvoiceNum=(SELECT InvoiceNum FROM transactioninfo WHERE invoiceNum="+ idTrans +") "  +
                                "AND SerCode=(SELECT SerCode FROM serviceinfo WHERE SerCode=" + idServ + ";";
            try{
                pst = conn.prepareStatement(modifyQuery);
                pst.setObject(1, txtBeautIdSub.getText());
                pst.setObject(2, txtServCodeSub.getText());

                pst.executeUpdate();
                System.out.println("Modified successfully");
            }catch(Exception e){
                e.printStackTrace();
            }
            } else {
            String modifyQuery= "UPDATE subtotalcomputation " +
                                "SET BeautID=?, SerCode=? " +
                                "WHERE InvoiceNum=(SELECT InvoiceNum FROM transactioninfo WHERE invoiceNum="+ idTrans +") "  +
                                "AND SerCode=(SELECT SerCode FROM serviceinfo WHERE SerCode=" + idServ + ";" +
                                "UPDATE satisfaction " +
                                "SET satisfaction=?" + 
                                "WHERE InvoiceNum =" + idTrans + "AND SerCode=" + idServ + ";";
            try{
                pst = conn.prepareStatement(modifyQuery);
                pst.setObject(1, txtBeautIdSub.getText());
                pst.setObject(2, txtServCodeSub.getText());
                pst.setString(3, txtSatisSub.getText());

                pst.executeUpdate();
                System.out.println("Modified successfully");
            }catch(Exception e){
                e.printStackTrace();
            }
            }
        }
    }//GEN-LAST:event_btnUpdateSubActionPerformed
    private void btnRemoveSubtotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveSubtotalActionPerformed
        if(tblTransInfo.getSelectedRow()!=-1 && tblSubInfo.getSelectedRow()!=-1) {
            try{
            model = (DefaultTableModel) tblTransInfo.getModel();
            int row = tblTransInfo.getSelectedRow();
            Object idTrans = model.getValueAt(row, 0);
            model2 = (DefaultTableModel) tblSubInfo.getModel();
            int rowSub = tblSubInfo.getSelectedRow();
            Object idSub = model2.getValueAt(rowSub, 2);
            String modifyQuery="DELETE FROM subtotalcomputation WHERE InvoiceNum="+ idTrans +"AND SerCode="+ idSub;
                pst = conn.prepareStatement(modifyQuery);
                pst.executeUpdate();
                System.out.println("Modified successfully");
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnRemoveSubtotalActionPerformed

    private void btnRefreshSubtotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshSubtotalActionPerformed
        String Beautician="";
        String BeauticianFee="";
        String Service="";
        String ServiceFee="";
        String Membership="";
        String Subtotal="";
        String Satisfaction="";
        model = (DefaultTableModel) tblCustInfo.getModel();
        model.setRowCount(0);
        model2 = (DefaultTableModel) tblTransInfo.getModel();
        int rowTrans = tblTransInfo.getSelectedRow();
        Object idTrans = model2.getValueAt(rowTrans, 2);
        String refreshQuery = "SELECT * " +
                "FROM subtotalcomputation AS SC, satisfaction AS sat " +
                "WHERE sc.InvoiceNum = " + idTrans + " AND sat.InvoiceNum = "+ idTrans + 
                "HAVING sc.ServCode = sat.ServCode";
        try{
            pst = conn.prepareStatement(refreshQuery);
            ResultSet rs = pst.executeQuery();

            while(rs.next()){
                Beautician=rs.getString("beautid");
                BeauticianFee=rs.getString("beautTF");
                Service=rs.getString("SerCode");
                ServiceFee=rs.getString("SerBFee");
                Membership=rs.getString("memID");
                Subtotal=rs.getString("subtotal");
                Satisfaction=rs.getString("satisfaction");
                model.addRow(new Object[]{Beautician,BeauticianFee,Service,ServiceFee,Membership, Subtotal, Satisfaction});
            }
        }catch(Exception e){
            e.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshSubtotalActionPerformed

    private void btnRemoveTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveTransActionPerformed
        if(tblTransInfo.getSelectedRow()!=-1){
            model = (DefaultTableModel) tblTransInfo.getModel();
            int row = tblTransInfo.getSelectedRow();
            Object id = model.getValueAt(row, 0);
            
            String delRow = "DELETE FROM satisfaction WHERE invoicenum IN (SELECT invoicenum FROM transactioninfo WHERE invoicenum="+ id + ");" +
                            "DELETE FROM subtotalcalculation " +
                            "WHERE invoicenum IN " +
                            "(SELECT invoicenum FROM transactioninfo WHERE invoicenum="+ id +");" +
                            "DELETE FROM transactioninfo WHERE invoicenum="+ id +";";
            try{
                pst = conn.prepareStatement(delRow);
                pst.execute();
                model.removeRow(tblCustInfo.getSelectedRow());
                System.out.println("Transaction Row deleted successfully");
            }catch(Exception e){
                e.printStackTrace();
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnRemoveTransActionPerformed

    private void btnRefreshTransactionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshTransactionsActionPerformed
        try{
            String Invoice="";
            String Customer="";
            String Date="";
            String Time="";
            String Branch="";
            String Payment="";
            String Member="";
            String Total="";
            model = (DefaultTableModel) tblCustInfo.getModel();
            model.setRowCount(0);
            String ins = "SELECT ti.*," +
                         "(SELECT SUM(sc.subtotal) FROM subtotalcomputation AS sc WHERE ti.invoicenum = sc.invoicenum) AS total, " +
                         "(SELECT MemID FROM customer FROM customerinfo AS ci WHERE ti.custid = ci.custid) AS member " +
                         "FROM transactioninfo AS ti";
            pst = conn.prepareStatement(ins);
            ResultSet rs = pst.executeQuery();
            while(rs.next()){
                Invoice = rs.getString("invoicenum");
                Customer="custid";
                Date="date";
                Time="time";
                Branch="branch";
                Payment="paymentmethod";
                Member="member";
                Total="total";
                model.addRow(new Object[]{Invoice, Customer, Date, Time, Branch, Payment, Member, Total});
            }
        }catch(Exception e){
            e.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshTransactionsActionPerformed

    private void btnAddTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTransActionPerformed
        try{            
            DateTimeFormatter DTF = DateTimeFormatter.ofPattern("dd-MM-uuuu");
            String dateInputText = txtDateTrans.getText();
            LocalDate dateInput = LocalDate.parse(dateInputText, DTF);
            String timeInputText = txtTimeTrans.getText();
            LocalTime timeInput = LocalTime.parse(timeInputText, DateTimeFormatter.ISO_LOCAL_TIME);
            
            String ins = "INSERT INTO transactioninfo " +
                            "InvoiceNum, CustID, Date, Time, Branch, PaymentMethod " +
                            "VALUES (?, ?, ?, ?, ?, ?)";
            pst = conn.prepareStatement(ins);
            pst.setString(1,txtInvoiceTrans.getText());
            pst.setString(2,txtCustTrans.getText());
            pst.setObject(3,dateInput);
            pst.setObject(4,timeInput);
            pst.setString(5,txtBranchTrans.getText());
            pst.setString(6,txtPayTrans.getText());
            
            pst.executeUpdate();
            System.out.println("Inserted Transaction successfully");
        } catch(SQLException ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnAddTransActionPerformed

    private void btnUpdateTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateTransActionPerformed
        if(tblTransInfo.getSelectedRow()!=-1){
            DateTimeFormatter DTF = DateTimeFormatter.ofPattern("dd-MM-uuuu");
            String dateInputText = txtDateTrans.getText();
            LocalDate dateInput = LocalDate.parse(dateInputText, DTF);
            String timeInputText = txtTimeTrans.getText();
            LocalTime timeInput = LocalTime.parse(timeInputText, DateTimeFormatter.ISO_LOCAL_TIME);
            
            model = (DefaultTableModel) tblTransInfo.getModel();
            int row = tblTransInfo.getSelectedRow();
            Object id = model.getValueAt(row, 0);
            String modifyQuery= "UPDATE transactioninfo " +
                                "SET Date=?, Time=?, Branch=?, PaymentMethod=? " +
                                "WHERE InvoiceNum="+id;
            try{
                pst = conn.prepareStatement(modifyQuery);
                pst.setObject(1, dateInput);
                pst.setObject(2, timeInput);
                pst.setString(3, txtBranchTrans.getText());
                pst.setString(4, txtPayTrans.getText());
                
                pst.executeUpdate();
                System.out.println("Modified successfully");
        }catch(Exception e){
            e.printStackTrace();
        }
        }
    }//GEN-LAST:event_btnUpdateTransActionPerformed

    private void txtSatisSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSatisSubActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSatisSubActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(adminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(adminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(adminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(adminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new adminPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddSide;
    private javax.swing.JButton btnAddSub;
    private javax.swing.JButton btnAddTrans;
    private javax.swing.JButton btnBeautAdd;
    private javax.swing.JButton btnBeautModify;
    private javax.swing.JButton btnBeautRefresh;
    private javax.swing.JButton btnBeautRemove;
    private javax.swing.JRadioButton btnGenderFemaleSide;
    private javax.swing.JRadioButton btnGenderMaleSide;
    private javax.swing.JRadioButton btnGenderOthersSide;
    private javax.swing.ButtonGroup btnGroupBeautTier;
    private javax.swing.ButtonGroup btnGroupGenderSide;
    private javax.swing.JButton btnModify;
    private javax.swing.JButton btnRefreshCust;
    private javax.swing.JButton btnRefreshSubtotal;
    private javax.swing.JButton btnRefreshTransactions;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnRemoveSubtotal;
    private javax.swing.JButton btnRemoveTrans;
    private javax.swing.JRadioButton btnTierBeginner;
    private javax.swing.JRadioButton btnTierExpert;
    private javax.swing.JRadioButton btnTierNovice;
    private javax.swing.JButton btnUpdateSub;
    private javax.swing.JButton btnUpdateTrans;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblAddressSide;
    private javax.swing.JLabel lblBeautName;
    private javax.swing.JLabel lblBeautTier;
    private javax.swing.JLabel lblCustNameSide;
    private javax.swing.JLabel lblCustNameSide1;
    private javax.swing.JLabel lblCustNameSide10;
    private javax.swing.JLabel lblCustNameSide2;
    private javax.swing.JLabel lblCustNameSide3;
    private javax.swing.JLabel lblCustNameSide4;
    private javax.swing.JLabel lblCustNameSide5;
    private javax.swing.JLabel lblCustNameSide6;
    private javax.swing.JLabel lblCustNameSide8;
    private javax.swing.JLabel lblCustNameSide9;
    private javax.swing.JLabel lblGenderSide;
    private javax.swing.JPanel pnlBeautInfo;
    private javax.swing.JPanel pnlMembers;
    private javax.swing.JPanel pnlTransactions;
    private javax.swing.JTabbedPane tabMain;
    private javax.swing.JTable tblBeautInfo;
    private javax.swing.JTable tblCustInfo;
    private javax.swing.JTable tblSubInfo;
    private javax.swing.JTable tblTransInfo;
    private javax.swing.JTextField txtAddressSide;
    private javax.swing.JTextField txtBeautIdSub;
    private javax.swing.JTextField txtBeautName;
    private javax.swing.JTextField txtBranchTrans;
    private javax.swing.JTextField txtCustNameSide;
    private javax.swing.JTextField txtCustTrans;
    private javax.swing.JTextField txtDateTrans;
    private javax.swing.JTextField txtInvoiceTrans;
    private javax.swing.JTextField txtPayTrans;
    private javax.swing.JTextField txtSatisSub;
    private javax.swing.JTextField txtServCodeSub;
    private javax.swing.JTextField txtTimeTrans;
    // End of variables declaration//GEN-END:variables
}
